{
  "_args": [
    [
      {
        "raw": "kareem@2.3.2",
        "scope": null,
        "escapedName": "kareem",
        "name": "kareem",
        "rawSpec": "2.3.2",
        "spec": "2.3.2",
        "type": "version"
      },
      "C:\\Users\\Me\\Desktop\\ToDoList-master\\node_modules\\mongoose"
    ]
  ],
  "_from": "kareem@2.3.2",
  "_hasShrinkwrap": false,
  "_id": "kareem@2.3.2",
  "_location": "/kareem",
  "_nodeVersion": "12.13.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/kareem_2.3.2_1607442213504_0.5515351138768962"
  },
  "_npmUser": {
    "name": "vkarpov15",
    "email": "val@karpov.io"
  },
  "_npmVersion": "6.12.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "kareem@2.3.2",
    "scope": null,
    "escapedName": "kareem",
    "name": "kareem",
    "rawSpec": "2.3.2",
    "spec": "2.3.2",
    "type": "version"
  },
  "_requiredBy": [
    "/mongoose"
  ],
  "_resolved": "https://registry.npmjs.org/kareem/-/kareem-2.3.2.tgz",
  "_shasum": "78c4508894985b8d38a0dc15e1a8e11078f2ca93",
  "_shrinkwrap": null,
  "_spec": "kareem@2.3.2",
  "_where": "C:\\Users\\Me\\Desktop\\ToDoList-master\\node_modules\\mongoose",
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "bugs": {
    "url": "https://github.com/vkarpov15/kareem/issues"
  },
  "dependencies": {},
  "description": "Next-generation take on pre/post function hooks",
  "devDependencies": {
    "acquit": "1.x",
    "acquit-ignore": "0.1.x",
    "mocha": "5.x",
    "nyc": "11.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-STHz9P7X2L4Kwn72fA4rGyqyXdmrMSdxqHx9IXon/FXluXieaFA6KJ2upcHAHxQPQ0LeM/OjLrhFxifHewOALQ==",
    "shasum": "78c4508894985b8d38a0dc15e1a8e11078f2ca93",
    "tarball": "https://registry.npmjs.org/kareem/-/kareem-2.3.2.tgz",
    "fileCount": 14,
    "unpackedSize": 100929,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfz58mCRA9TVsSAnZWagAA2wcP/3WZLaQHVDsnRYvVqFEb\nKh3BRR43nnxwE8NjiF7eBJWgaHtHqZ9Ph4fMSzgZyRgD9SltYFXQYV7vwkdY\ndERC48IKdPC43vCF/vlmkzcft0fzBjdrrttGGsMBXjy9/+fn81VYwWF88r4E\nY9/neu4rzdU/5ZFP38Wy0vHghCONQr+l73IkA+eH6LksSp8OSdBsMMoYDUM1\nKi5RJmA1FJ4tNO27FjQZH8017s5auwHwtZgKiwZIu7X0hF+lJPnqICctnkw1\nS4+MbAonl05Jb5j8lO6ALR069A+3efYH7RLgZSPKbetB/wNVKscyuf03MPsg\nlE/q4ExJEk9mlalbXW0qeAD01PIMcmJLqXwexDqUNlNpvErIfYgz3cgXcRyx\nwglwtjSaBQ8cCMUlLQd7jK2SbIm4zvBgFywkGtk3zia/TqAN7DuraWh32+h0\nKc83cq1mvx4w5srL2NyQILrwCFuT+p+iabBvcB5B7t1K2TicKHtEvCJqTeSZ\nEXLtTS0E+uywXO6bjX38sKUVQ4YmS2NMrTPcGBSWeu6eKlFv1LvM4pJWaO6L\nC9ARUQRm30Sm1ZEqJNDV/A4LXLSKVT4PVMBCOlaSPqkWO3KUrrCV5b4xOKuS\nO1hs/0ztvC21qGYLMLSRH/aFUCdyl1aVfZ2s9hldKzX3Ekps7SRvRkAngYxD\ngSpV\r\n=3eBn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "bb76ae1050de78f6aca8547174f0c7bddf8b379e",
  "homepage": "https://github.com/vkarpov15/kareem#readme",
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "vkarpov15",
      "email": "val@karpov.io"
    }
  ],
  "name": "kareem",
  "optionalDependencies": {},
  "readme": "# kareem\n\n  [![Build Status](https://travis-ci.org/vkarpov15/kareem.svg?branch=master)](https://travis-ci.org/vkarpov15/kareem)\n  [![Coverage Status](https://img.shields.io/coveralls/vkarpov15/kareem.svg)](https://coveralls.io/r/vkarpov15/kareem)\n\nRe-imagined take on the [hooks](http://npmjs.org/package/hooks) module, meant to offer additional flexibility in allowing you to execute hooks whenever necessary, as opposed to simply wrapping a single function.\n\nNamed for the NBA's all-time leading scorer Kareem Abdul-Jabbar, known for his mastery of the [hook shot](http://en.wikipedia.org/wiki/Kareem_Abdul-Jabbar#Skyhook)\n\n<img src=\"http://upload.wikimedia.org/wikipedia/commons/0/00/Kareem-Abdul-Jabbar_Lipofsky.jpg\" width=\"220\">\n\n# API\n\n## pre hooks\n\nMuch like [hooks](https://npmjs.org/package/hooks), kareem lets you define\npre and post hooks: pre hooks are called before a given function executes.\nUnlike hooks, kareem stores hooks and other internal state in a separate\nobject, rather than relying on inheritance. Furthermore, kareem exposes\nan `execPre()` function that allows you to execute your pre hooks when\nappropriate, giving you more fine-grained control over your function hooks.\n\n\n#### It runs without any hooks specified\n\n```javascript\nhooks.execPre('cook', null, function() {\n  // ...\n});\n```\n\n#### It runs basic serial pre hooks\n\npre hook functions take one parameter, a \"done\" function that you execute\nwhen your pre hook is finished.\n\n\n```javascript\nvar count = 0;\n\nhooks.pre('cook', function(done) {\n  ++count;\n  done();\n});\n\nhooks.execPre('cook', null, function() {\n  assert.equal(1, count);\n});\n```\n\n#### It can run multipe pre hooks\n\n```javascript\nvar count1 = 0;\nvar count2 = 0;\n\nhooks.pre('cook', function(done) {\n  ++count1;\n  done();\n});\n\nhooks.pre('cook', function(done) {\n  ++count2;\n  done();\n});\n\nhooks.execPre('cook', null, function() {\n  assert.equal(1, count1);\n  assert.equal(1, count2);\n});\n```\n\n#### It can run fully synchronous pre hooks\n\nIf your pre hook function takes no parameters, its assumed to be\nfully synchronous.\n\n\n```javascript\nvar count1 = 0;\nvar count2 = 0;\n\nhooks.pre('cook', function() {\n  ++count1;\n});\n\nhooks.pre('cook', function() {\n  ++count2;\n});\n\nhooks.execPre('cook', null, function(error) {\n  assert.equal(null, error);\n  assert.equal(1, count1);\n  assert.equal(1, count2);\n});\n```\n\n#### It properly attaches context to pre hooks\n\nPre save hook functions are bound to the second parameter to `execPre()`\n\n\n```javascript\nhooks.pre('cook', function(done) {\n  this.bacon = 3;\n  done();\n});\n\nhooks.pre('cook', function(done) {\n  this.eggs = 4;\n  done();\n});\n\nvar obj = { bacon: 0, eggs: 0 };\n\n// In the pre hooks, `this` will refer to `obj`\nhooks.execPre('cook', obj, function(error) {\n  assert.equal(null, error);\n  assert.equal(3, obj.bacon);\n  assert.equal(4, obj.eggs);\n});\n```\n\n#### It can execute parallel (async) pre hooks\n\nLike the hooks module, you can declare \"async\" pre hooks - these take two\nparameters, the functions `next()` and `done()`. `next()` passes control to\nthe next pre hook, but the underlying function won't be called until all\nasync pre hooks have called `done()`.\n\n\n```javascript\nhooks.pre('cook', true, function(next, done) {\n  this.bacon = 3;\n  next();\n  setTimeout(function() {\n    done();\n  }, 5);\n});\n\nhooks.pre('cook', true, function(next, done) {\n  next();\n  var _this = this;\n  setTimeout(function() {\n    _this.eggs = 4;\n    done();\n  }, 10);\n});\n\nhooks.pre('cook', function(next) {\n  this.waffles = false;\n  next();\n});\n\nvar obj = { bacon: 0, eggs: 0 };\n\nhooks.execPre('cook', obj, function() {\n  assert.equal(3, obj.bacon);\n  assert.equal(4, obj.eggs);\n  assert.equal(false, obj.waffles);\n});\n```\n\n#### It supports returning a promise\n\nYou can also return a promise from your pre hooks instead of calling\n`next()`. When the returned promise resolves, kareem will kick off the\nnext middleware.\n\n\n```javascript\nhooks.pre('cook', function() {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      this.bacon = 3;\n      resolve();\n    }, 100);\n  });\n});\n\nvar obj = { bacon: 0 };\n\nhooks.execPre('cook', obj, function() {\n  assert.equal(3, obj.bacon);\n});\n```\n\n## post hooks\n\nacquit:ignore:end\n\n#### It runs without any hooks specified\n\n```javascript\nhooks.execPost('cook', null, [1], function(error, eggs) {\n  assert.ifError(error);\n  assert.equal(1, eggs);\n  done();\n});\n```\n\n#### It executes with parameters passed in\n\n```javascript\nhooks.post('cook', function(eggs, bacon, callback) {\n  assert.equal(1, eggs);\n  assert.equal(2, bacon);\n  callback();\n});\n\nhooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n  assert.ifError(error);\n  assert.equal(1, eggs);\n  assert.equal(2, bacon);\n});\n```\n\n#### It can use synchronous post hooks\n\n```javascript\nvar execed = {};\n\nhooks.post('cook', function(eggs, bacon) {\n  execed.first = true;\n  assert.equal(1, eggs);\n  assert.equal(2, bacon);\n});\n\nhooks.post('cook', function(eggs, bacon, callback) {\n  execed.second = true;\n  assert.equal(1, eggs);\n  assert.equal(2, bacon);\n  callback();\n});\n\nhooks.execPost('cook', null, [1, 2], function(error, eggs, bacon) {\n  assert.ifError(error);\n  assert.equal(2, Object.keys(execed).length);\n  assert.ok(execed.first);\n  assert.ok(execed.second);\n  assert.equal(1, eggs);\n  assert.equal(2, bacon);\n});\n```\n\n#### It supports returning a promise\n\nYou can also return a promise from your post hooks instead of calling\n`next()`. When the returned promise resolves, kareem will kick off the\nnext middleware.\n\n\n```javascript\nhooks.post('cook', function(bacon) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      this.bacon = 3;\n      resolve();\n    }, 100);\n  });\n});\n\nvar obj = { bacon: 0 };\n\nhooks.execPost('cook', obj, obj, function() {\n  assert.equal(obj.bacon, 3);\n});\n```\n\n## wrap()\n\nacquit:ignore:end\n\n#### It wraps pre and post calls into one call\n\n```javascript\nhooks.pre('cook', true, function(next, done) {\n  this.bacon = 3;\n  next();\n  setTimeout(function() {\n    done();\n  }, 5);\n});\n\nhooks.pre('cook', true, function(next, done) {\n  next();\n  var _this = this;\n  setTimeout(function() {\n    _this.eggs = 4;\n    done();\n  }, 10);\n});\n\nhooks.pre('cook', function(next) {\n  this.waffles = false;\n  next();\n});\n\nhooks.post('cook', function(obj) {\n  obj.tofu = 'no';\n});\n\nvar obj = { bacon: 0, eggs: 0 };\n\nvar args = [obj];\nargs.push(function(error, result) {\n  assert.ifError(error);\n  assert.equal(null, error);\n  assert.equal(3, obj.bacon);\n  assert.equal(4, obj.eggs);\n  assert.equal(false, obj.waffles);\n  assert.equal('no', obj.tofu);\n\n  assert.equal(obj, result);\n});\n\nhooks.wrap(\n  'cook',\n  function(o, callback) {\n    assert.equal(3, obj.bacon);\n    assert.equal(4, obj.eggs);\n    assert.equal(false, obj.waffles);\n    assert.equal(undefined, obj.tofu);\n    callback(null, o);\n  },\n  obj,\n  args);\n```\n\n## createWrapper()\n\n#### It wraps wrap() into a callable function\n\n```javascript\nhooks.pre('cook', true, function(next, done) {\n  this.bacon = 3;\n  next();\n  setTimeout(function() {\n    done();\n  }, 5);\n});\n\nhooks.pre('cook', true, function(next, done) {\n  next();\n  var _this = this;\n  setTimeout(function() {\n    _this.eggs = 4;\n    done();\n  }, 10);\n});\n\nhooks.pre('cook', function(next) {\n  this.waffles = false;\n  next();\n});\n\nhooks.post('cook', function(obj) {\n  obj.tofu = 'no';\n});\n\nvar obj = { bacon: 0, eggs: 0 };\n\nvar cook = hooks.createWrapper(\n  'cook',\n  function(o, callback) {\n    assert.equal(3, obj.bacon);\n    assert.equal(4, obj.eggs);\n    assert.equal(false, obj.waffles);\n    assert.equal(undefined, obj.tofu);\n    callback(null, o);\n  },\n  obj);\n\ncook(obj, function(error, result) {\n  assert.ifError(error);\n  assert.equal(3, obj.bacon);\n  assert.equal(4, obj.eggs);\n  assert.equal(false, obj.waffles);\n  assert.equal('no', obj.tofu);\n\n  assert.equal(obj, result);\n});\n```\n\n## clone()\n\nacquit:ignore:end\n\n#### It clones a Kareem object\n\n```javascript\nvar k1 = new Kareem();\nk1.pre('cook', function() {});\nk1.post('cook', function() {});\n\nvar k2 = k1.clone();\nassert.deepEqual(Array.from(k2._pres.keys()), ['cook']);\nassert.deepEqual(Array.from(k2._posts.keys()), ['cook']);\n```\n\n## merge()\n\n#### It pulls hooks from another Kareem object\n\n```javascript\nvar k1 = new Kareem();\nvar test1 = function() {};\nk1.pre('cook', test1);\nk1.post('cook', function() {});\n\nvar k2 = new Kareem();\nvar test2 = function() {};\nk2.pre('cook', test2);\nvar k3 = k2.merge(k1);\nassert.equal(k3._pres.get('cook').length, 2);\nassert.equal(k3._pres.get('cook')[0].fn, test2);\nassert.equal(k3._pres.get('cook')[1].fn, test1);\nassert.equal(k3._posts.get('cook').length, 1);\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vkarpov15/kareem.git"
  },
  "scripts": {
    "test": "mocha ./test/*",
    "test-travis": "nyc mocha ./test/*"
  },
  "version": "2.3.2"
}
