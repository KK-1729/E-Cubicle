{
  "_args": [
    [
      {
        "raw": "denque@^1.4.1",
        "scope": null,
        "escapedName": "denque",
        "name": "denque",
        "rawSpec": "^1.4.1",
        "spec": ">=1.4.1 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Me\\Desktop\\ToDoList-master\\node_modules\\mongodb"
    ]
  ],
  "_from": "denque@^1.4.1",
  "_hasShrinkwrap": false,
  "_id": "denque@1.5.0",
  "_location": "/denque",
  "_nodeVersion": "15.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/denque_1.5.0_1609781581555_0.6172315755242443"
  },
  "_npmUser": {
    "name": "salakar",
    "email": "mike.diarmid@gmail.com"
  },
  "_npmVersion": "7.0.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "denque@^1.4.1",
    "scope": null,
    "escapedName": "denque",
    "name": "denque",
    "rawSpec": "^1.4.1",
    "spec": ">=1.4.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/mongodb"
  ],
  "_resolved": "https://registry.npmjs.org/denque/-/denque-1.5.0.tgz",
  "_shasum": "773de0686ff2d8ec2ff92914316a47b73b1c73de",
  "_shrinkwrap": null,
  "_spec": "denque@^1.4.1",
  "_where": "C:\\Users\\Me\\Desktop\\ToDoList-master\\node_modules\\mongodb",
  "author": {
    "name": "Invertase",
    "email": "oss@invertase.io",
    "url": "http://github.com/invertase/"
  },
  "bugs": {
    "url": "https://github.com/invertase/denque/issues"
  },
  "contributors": [
    {
      "name": "Mike Diarmid",
      "email": "mike@invertase.io",
      "url": "Salakar"
    }
  ],
  "dependencies": {},
  "description": "The fastest javascript implementation of a double-ended queue. Maintains compatability with deque.",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "coveralls": "^2.13.3",
    "double-ended-queue": "^2.1.0-0",
    "istanbul": "^0.4.5",
    "mocha": "^3.5.3",
    "typescript": "^3.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CYiCSgIF1p6EUByQPlGkKnP1M9g0ZV3qMIrqMqZqdwazygIA/YP2vrbcyl1h/WppKJTdl1F85cXIle+394iDAQ==",
    "shasum": "773de0686ff2d8ec2ff92914316a47b73b1c73de",
    "tarball": "https://registry.npmjs.org/denque/-/denque-1.5.0.tgz",
    "fileCount": 6,
    "unpackedSize": 24035,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf81FOCRA9TVsSAnZWagAAbogQAIAdqlbXFJGEUTRFmzsk\nM2MCVLf4g5u0vGl7JwfMUVNp817CRvcTBx+FZXoSXjIjJMPwllubl4GgAg+x\nEUScWtLRhOuWBWhz1gD5vw5SJFZCeHU5iCitFjYq4bnxO/PmcNGYqmMkQCeM\nAOveS7O0SN0wPgwEBscVsJq6OosXwfC/A0qxrbnQD8xAQO/BSwLDzW0wpest\nGM2uAuAaj28Ob8ImUkVujPdOfV8z4Nd/drR1hRk5aTfxFovZl7ufcc38vH3k\nf4337D+2MKGSLoL9XWuzlQRLQMRYbCRJK1XAwAsdSYVyywXmhDk7s6R/ncLG\nrbqM4dcETkUKc+1PVpMym/Cosfx6AfwMgOrSfvJI4ZoDSZB8yclVQioY3CBf\nt3OQfAPmn1LfUfgLpIlIVVdvMrW1am1E8mfuYJbTM3wcwLOC1dyqw5efg4LN\nAylFu+1jZ9iOoRPu6ZGUPc+cU4GfG/yq35iXhhERg5qTOG+/BAnpgIybR1Qu\n0/wiyEnO9YRoPittXr6EnVoxgVFWC5eN3fvfW40IndUIrkMB06Zs/9S/KC50\n7lshjOleWcE4QnZEBAYriHqT1VdmRprpo7fDRFaWwRb2UcVxvdWC7erZA72o\nnnhPg9Z6poaPem4UFan9q+TVAuh/ofHM1RNkyCc5uUV/NSfkcnA8WMGu854a\n+v5c\r\n=e8FU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "0420632a878b271e2d7483c30468a60b4afc9456",
  "homepage": "https://github.com/invertase/denque#readme",
  "keywords": [
    "data-structure",
    "data-structures",
    "queue",
    "double",
    "end",
    "ended",
    "deque",
    "denque",
    "double-ended-queue"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "salakar",
      "email": "mike.diarmid@gmail.com"
    }
  ],
  "name": "denque",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <a href=\"https://invertase.io\">\n    <img src=\"https://static.invertase.io/assets/invertase-logo-small.png\"><br/>\n  </a>\n  <h2 align=\"center\">Denque</h2>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/denque\"><img src=\"https://img.shields.io/npm/dm/denque.svg?style=flat-square\" alt=\"NPM downloads\"></a>\n  <a href=\"https://www.npmjs.com/package/denque\"><img src=\"https://img.shields.io/npm/v/denque.svg?style=flat-square\" alt=\"NPM version\"></a>\n  <a href=\"https://travis-ci.org/Salakar/denque\"><img src=\"https://travis-ci.org/invertase/denque.svg\" alt=\"Build version\"></a>\n  <a href=\"https://coveralls.io/github/invertase/denque?branch=master\"><img src=\"https://coveralls.io/repos/github/invertase/denque/badge.svg?branch=master\" alt=\"Build version\"></a>  \n  <a href=\"/LICENSE\"><img src=\"https://img.shields.io/npm/l/denque.svg?style=flat-square\" alt=\"License\"></a>\n  <a href=\"https://discord.gg/C9aK28N\"><img src=\"https://img.shields.io/discord/295953187817521152.svg?logo=discord&style=flat-square&colorA=7289da&label=discord\" alt=\"Chat\"></a>\n  <a href=\"https://twitter.com/invertaseio\"><img src=\"https://img.shields.io/twitter/follow/invertaseio.svg?style=social&label=Follow\" alt=\"Follow on Twitter\"></a>\n</p>\n\nExtremely fast and lightweight [double-ended queue](http://en.wikipedia.org/wiki/Double-ended_queue) implementation with zero dependencies.\n\nDouble-ended queues can also be used as a:\n\n- [Stack](http://en.wikipedia.org/wiki/Stack_\\(abstract_data_type\\))\n- [Queue](http://en.wikipedia.org/wiki/Queue_\\(data_structure\\))\n\nThis implementation is currently the fastest available, even faster than `double-ended-queue`, see the [benchmarks](#benchmarks)\n\nEvery queue operation is done at a constant `O(1)` - including random access from `.peekAt(index)`.\n\n**Works on all node versions >= v0.10**\n\n# Quick Start\n\n    npm install denque\n\n```js\nconst Denque = require(\"denque\");\n\nconst denque = new Denque([1,2,3,4]);\ndenque.shift(); // 1\ndenque.pop(); // 4\n```\n\n\n# API\n\n- [`new Denque()`](#new-denque---denque)\n- [`new Denque(Array items)`](#new-denquearray-items---denque)\n- [`push(item)`](#pushitem---int)\n- [`unshift(item)`](#unshiftitem---int)\n- [`pop()`](#pop---dynamic)\n- [`shift()`](#shift---dynamic)\n- [`toArray()`](#toarray---array)\n- [`peekBack()`](#peekback---dynamic)\n- [`peekFront()`](#peekfront---dynamic)\n- [`peekAt(int index)`](#peekAtint-index---dynamic)\n- [`remove(int index, int count)`](#remove)\n- [`removeOne(int index)`](#removeOne)\n- [`splice(int index, int count, item1, item2, ...)`](#splice)\n- [`isEmpty()`](#isempty---boolean)\n- [`clear()`](#clear---void)\n\n#### `new Denque()` -> `Denque`\n\nCreates an empty double-ended queue with initial capacity of 4.\n\n```js\nvar denque = new Denque();\ndenque.push(1);\ndenque.push(2);\ndenque.push(3);\ndenque.shift(); //1\ndenque.pop(); //3\n```\n\n<hr>\n\n#### `new Denque(Array items)` -> `Denque`\n\nCreates a double-ended queue from `items`.\n\n```js\nvar denque = new Denque([1,2,3,4]);\ndenque.shift(); // 1\ndenque.pop(); // 4\n```\n\n<hr>\n\n\n#### `push(item)` -> `int`\n\nPush an item to the back of this queue. Returns the amount of items currently in the queue after the operation.\n\n```js\nvar denque = new Denque();\ndenque.push(1);\ndenque.pop(); // 1\ndenque.push(2);\ndenque.push(3);\ndenque.shift(); // 2\ndenque.shift(); // 3\n```\n\n<hr>\n\n#### `unshift(item)` -> `int`\n\nUnshift an item to the front of this queue. Returns the amount of items currently in the queue after the operation.\n\n```js\nvar denque = new Denque([2,3]);\ndenque.unshift(1);\ndenque.toString(); // \"1,2,3\"\ndenque.unshift(-2);\ndenque.toString(); // \"-2,-1,0,1,2,3\"\n```\n\n<hr>\n\n\n#### `pop()` -> `dynamic`\n\nPop off the item at the back of this queue.\n\nNote: The item will be removed from the queue. If you simply want to see what's at the back of the queue use [`peekBack()`](#peekback---dynamic) or [`.peekAt(-1)`](#peekAtint-index---dynamic).\n\nIf the queue is empty, `undefined` is returned. If you need to differentiate between `undefined` values in the queue and `pop()` return value -\ncheck the queue `.length` before popping.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.pop(); // 3\ndenque.pop(); // 2\ndenque.pop(); // 1\ndenque.pop(); // undefined\n```\n\n**Aliases:** `removeBack`\n\n<hr>\n\n#### `shift()` -> `dynamic`\n\nShifts off the item at the front of this queue.\n\nNote: The item will be removed from the queue. If you simply want to see what's at the front of the queue use [`peekFront()`](#peekfront---dynamic) or [`.peekAt(0)`](#peekAtint-index---dynamic).\n\nIf the queue is empty, `undefined` is returned. If you need to differentiate between `undefined` values in the queue and `shift()` return value -\ncheck the queue `.length` before shifting.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.shift(); // 1\ndenque.shift(); // 2\ndenque.shift(); // 3\ndenque.shift(); // undefined\n```\n\n<hr>\n\n#### `toArray()` -> `Array`\n\nReturns the items in the queue as an array. Starting from the item in the front of the queue and ending to the item at the back of the queue.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.unshift(0);\ndenque.toArray(); // [0,1,2,3,4]\n```\n\n<hr>\n\n#### `peekBack()` -> `dynamic`\n\nReturns the item that is at the back of this queue without removing it.\n\nIf the queue is empty, `undefined` is returned.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.peekBack(); // 4\n```\n\n<hr>\n\n#### `peekFront()` -> `dynamic`\n\nReturns the item that is at the front of this queue without removing it.\n\nIf the queue is empty, `undefined` is returned.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.push(4);\ndenque.peekFront(); // 1\n```\n\n<hr>\n\n#### `peekAt(int index)` -> `dynamic`\n\nReturns the item that is at the given `index` of this queue without removing it.\n\nThe index is zero-based, so `.peekAt(0)` will return the item that is at the front, `.peekAt(1)` will return\nthe item that comes after and so on.\n\nThe index can be negative to read items at the back of the queue. `.peekAt(-1)` returns the item that is at the back of the queue,\n`.peekAt(-2)` will return the item that comes before and so on.\n\nReturns `undefined` if `index` is not a valid index into the queue.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.peekAt(0); //1\ndenque.peekAt(1); //2\ndenque.peekAt(2); //3\n\ndenque.peekAt(-1); // 3\ndenque.peekAt(-2); // 2\ndenque.peekAt(-3); // 1\n```\n\n**Note**: The implementation has O(1) random access using `.peekAt()`.\n\n**Aliases:** `get`\n\n<hr>\n\n#### `remove(int index, int count)` -> `array`\n\nRemove number of items from the specified index from the list.\n\nReturns array of removed items.\n\nReturns undefined if the list is empty.\n\n```js\nvar denque = new Denque([1,2,3,4,5,6,7]);\ndenque.remove(0,3); //[1,2,3]\ndenque.remove(1,2); //[5,6]\nvar denque1 = new Denque([1,2,3,4,5,6,7]);\ndenque1.remove(4, 100); //[5,6,7]\n```\n\n<hr>\n\n#### `removeOne(int index)` -> `dynamic`\n\nRemove and return the item at the specified index from the list.\n\nReturns undefined if the list is empty.\n\n```js\nvar denque = new Denque([1,2,3,4,5,6,7]);\ndenque.removeOne(4); // 5\ndenque.removeOne(3); // 4\ndenque1.removeOne(1); // 2\n```\n\n<hr>\n\n#### `splice(int index, int count, item1, item2, ...)` -> `array`\n\nNative splice implementation.\n\nRemove number of items from the specified index from the list and/or add new elements.\n\nReturns array of removed items or empty array if count == 0.\n\nReturns undefined if the list is empty.\n\n```js\nvar denque = new Denque([1,2,3,4,5,6,7]);\ndenque.splice(denque.length, 0, 8, 9, 10); // []\ndenque.toArray() // [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\ndenque.splice(3, 3, 44, 55, 66); // [4,5,6]\ndenque.splice(5,4, 666,667,668,669); // [ 66, 7, 8, 9 ]\ndenque.toArray() // [ 1, 2, 3, 44, 55, 666, 667, 668, 669, 10 ]\n```\n\n<hr>\n\n#### `isEmpty()` -> `boolean`\n\nReturn `true` if this queue is empty, `false` otherwise.\n\n```js\nvar denque = new Denque();\ndenque.isEmpty(); // true\ndenque.push(1);\ndenque.isEmpty(); // false\n```\n\n<hr>\n\n#### `clear()` -> `void`\n\nRemove all items from this queue. Does not change the queue's capacity.\n\n```js\nvar denque = new Denque([1,2,3]);\ndenque.toString(); // \"1,2,3\"\ndenque.clear();\ndenque.toString(); // \"\"\n```\n<hr>\n\n\n## Benchmarks\n\n#### Platform info:\n```\nDarwin 17.0.0 x64\nNode.JS 9.4.0\nV8 6.2.414.46-node.17\nIntel(R) Core(TM) i7-7700K CPU @ 4.20GHz × 8\n```\n\n#### 1000 items in queue\n\n (3 x shift + 3 x push ops per 'op')\n\n    denque x 64,365,425 ops/sec ±0.69% (92 runs sampled)\n    double-ended-queue x 26,646,882 ops/sec ±0.47% (94 runs sampled)\n\n#### 2 million items in queue\n\n (3 x shift + 3 x push ops per 'op')\n\n    denque x 61,994,249 ops/sec ±0.26% (95 runs sampled)\n    double-ended-queue x 26,363,500 ops/sec ±0.42% (91 runs sampled)\n\n#### Splice\n\n (1 x splice per 'op') - initial size of 100,000 items\n\n    denque.splice x 925,749 ops/sec ±22.29% (77 runs sampled)\n    native array splice x 7,777 ops/sec ±8.35% (50 runs sampled)\n\n#### Remove\n\n (1 x remove + 10 x push per 'op') - initial size of 100,000 items\n\n    denque.remove x 2,635,275 ops/sec ±0.37% (95 runs sampled)\n    native array splice - Fails to complete: \"JavaScript heap out of memory\"\n\n#### Remove One\n\n (1 x removeOne + 10 x push per 'op') - initial size of 100,000 items\n\n    denque.removeOne x 1,088,240 ops/sec ±0.21% (93 runs sampled)\n    native array splice x 5,300 ops/sec ±0.41% (96 runs sampled)\n    \n---\n\nBuilt and maintained with 💛 by [Invertase](https://invertase.io).\n\n- [💼 Hire Us](https://invertase.io/hire-us)\n- [☕️ Sponsor Us](https://opencollective.com/react-native-firebase)\n- [👩‍💻 Work With Us](https://invertase.io/jobs)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/invertase/denque.git"
  },
  "scripts": {
    "benchmark_2mil": "node benchmark/two_million",
    "benchmark_remove": "node benchmark/remove",
    "benchmark_removeOne": "node benchmark/removeOne",
    "benchmark_splice": "node benchmark/splice",
    "benchmark_thousand": "node benchmark/thousand",
    "coveralls": "cat ./coverage/lcov.info | coveralls",
    "test": "istanbul cover --report lcov _mocha && npm run typescript",
    "typescript": "tsc --project ./test/type/tsconfig.json"
  },
  "version": "1.5.0"
}
